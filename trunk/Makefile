#
# Makefile for Clip Art Browser
#
# Copyright 2005, Jon Phillips.
#
# It is quite basic. But getting more complex by the day.
#
# To do a basic installation:
#	make install
# 
# All variables can be overriden from the commandline as such:
#
# 	INKSCAPEDIR=/opt/inkscape make install
#
# 

RELEASE_NUM = $(shell cat VERSION)
APPNAME = clipartbrowser
FULLNAME= Clip Art Browser
SRCDIR = ""
PACKAGEDIR=packages

PACK_FULL_DIR=$(APPNAME)-$(RELEASE_NUM)

PACK_PREP_FULL_DIR=$(PACKAGEDIR)/$(PACK_FULL_DIR)

INSTALL = /bin/install -c
MAKENSIS = /opt/nsis/makensis

PREFIX = /usr
EXEC_PREFIX = $(PREFIX)
BINDIR=$(PREFIX)/bin
DATADIR=$(PREFIX)/share
CLIPARTDIR=$(DATADIR)/clipart
OPENCLIPARTDIR=$(CLIPARTDIR)/openclipart
INKSCAPEDIR=$(PREFIX)/local/share/inkscape
EXTENSIONSDIR=$(INKSCAPEDIR)/extensions
# Do we really want the release number here? I don't think so.
#APPDIR=$(CLIPARTDIR)/$(APPNAME)-$(RELEASE_NUM)
APPDIR=$(CLIPARTDIR)/$(APPNAME)
MANDIR=$(DATADIR)/man
MAN1DIR=$(MANDIR)/man1
DESTDIR=

MODULESDIR=modules

# List of author credit files
# AUTHORS_FILES=AUTHORS.in

INDEX_SCRIPT=indexClipart.py

CONF_FILES=clipartbrowser.glade \
	clipartbrowser.conf \


EXE_FILES=clipartbrowser.py \
	clipartbrowser.inx \
	indexClipart.py

MODULE_FILES=__init__.py \
	__init__.pyc \
	localocal.py \
	localocal.pyc \
	ocal.py  \
	ocal.pyc

# List of files to be included in distributions
#DIST_FILES=AUTHORS \
#	ChangeLog \
#	LICENSE \
#	NEWS \
#	README \
#	VERSION \
#	INSTALL \
#	Makefile \
#	$(APPNAME).spec \
#	$(APPNAME).spec.in \
#	$(AUTHORS_FILES)


# DIST_FILES=`find $(SRCDIR) -name "*"`

# The following files are autogenerated and should not be in CVS
# AUTHORS
# nist/build.nsi
# openclipart.spec

#all: AUTHORS versions

all:
	# need to have normal user go through clipart folder and do the
	# indexing as normal user
	#
	# then in make install, need to have superuser move it to the
	# root dir
	#

# Create release directories ready for packaging
#distprep: all

	# create package directories
#	rm -rf $(PACK_PREP_FULL_DIR) $(PACK_PREP_SVG_DIR) $(PACK_PREP_TOOLS_DIR)
#	install -m 755 -d $(PACK_PREP_FULL_DIR)
#	install -m 755 -d $(PACK_PREP_SVG_DIR)
#	install -m 755 -d $(PACK_PREP_TOOLS_DIR)
	
	# copy data into packaging area
#	cp -Rfp $(SRCDIR) $(PACK_PREP_FULL_DIR)
#	cp -Rfp $(SRCDIR) $(PACK_PREP_SVG_DIR)
#	cp -Rfp $(TOOLSDIR)/* $(PACK_PREP_TOOLS_DIR)
	
	# Copy in all dist and package files to both
#	install -m 644 $(DIST_FILES) $(PACK_PREP_FULL_DIR)
#	install -m 644 $(DIST_FILES) $(PACK_PREP_SVG_DIR)
#	install -m 644 $(TOOLS_FILES) $(PACK_PREP_TOOLS_DIR)

	# Copy in nsis files to both
#	cp -Rfp $(NSISDIR) $(PACK_PREP_FULL_DIR)
#	cp -Rfp $(NSISDIR) $(PACK_PREP_SVG_DIR)

	# Get rid of all CVS folders in the packaging area
#	find $(PACK_PREP_FULL_DIR) $(PACK_PREP_SVG_DIR) $(PACK_PREP_TOOLS_DIR) \
#		-depth -name CVS -type d -exec rm -rf {} \;

	# Get rid of non-svg files from SVG directory
#	find $(PACK_PREP_SVG_DIR)/$(SRCDIR) \( -name '*.*' -not -name '*svg' \)\
#		-type f -exec rm -f {} \;

install: all
	# $(INSTALL) -m 755 -d $(DESTDIR)$(APPDIR)
	#cd $(SRCDIR); \
	#for d in `find . -type d -not -name CVS -print`; \
	#do \
	#	$(INSTALL) -m 755 -d $(DESTDIR)$(APPDIR)/$$d; \
	#	for f in `find $$d -maxdepth 1 -type f -print`; \
	#	do \
	#		$(INSTALL) -m 644 $$f $(DESTDIR)$(APPDIR)/$$d; \
	#	done; \
	#done
	#$(INSTALL) -m 644 $(DIST_FILES) $(DESTDIR)$(APPDIR)
	# Install manpage if someone writes one
	#$(INSTALL) -m 755 -d $(DESTDIR)$(MAN1DIR)
	#$(INSTALL) -m 644 $(APPNAME).1 $(DESTDIR)$(MAN1DIR)
	$(INSTALL) -m 755 $(INDEX_SCRIPT) $(OPENCLIPARTDIR)
	# need to install here the index.dat into the OPENCLIPARTDIR
	$(INSTALL) -m 755 -d $(EXTENSIONSDIR)/$(MODULESDIR)
	$(INSTALL) -m 644 $(CONF_FILES) $(EXTENSIONSDIR)
	$(INSTALL) -m 755 $(EXE_FILES) $(EXTENSIONSDIR)
	for FILE in $(MODULE_FILES); \
		do $(INSTALL) -m 644 $(MODULESDIR)/$$FILE \
			$(EXTENSIONSDIR)/$(MODULESDIR); \
	done

uninstall:
	@# rm -rf $(EXTENSIONSDIR)/
	@# echo $(EXTENSIONSDIR)/$(CONF_FILES)
	rm -f $(OPENCLIPARTDIR)/$(INDEX_SCRIPT)

	for FILE in $(CONF_FILES) $(CONF_FILES); \
		do rm -f $(EXTENSIONSDIR)/$$FILE; \
	done
	for FILE in $(MODULE_FILES); \
		do rm -f $(EXTENSIONSDIR)/$(MODULESDIR)/$$FILE; \
	done
	@# rm -f $(DESTDIR)$(MAN1DIR)/$(APPNAME).1

#zip: distprep
#	(cd $(PACKAGEDIR); zip -r $(PACK_FULL_DIR).zip $(PACK_FULL_DIR))
#
#tarball: distprep
#	tar -C $(PACKAGEDIR) -czf $(PACK_PREP_FULL_DIR).tar.gz $(PACK_FULL_DIR)
#
#bzip: distprep
#	tar -C $(PACKAGEDIR) -cjf $(PACK_PREP_FULL_DIR).tar.bz2 $(PACK_FULL_DIR)

#bzip-tools: distprep
#	tar -C $(PACKAGEDIR) -cjf $(PACK_PREP_TOOLS_DIR).tar.bz2 $(PACK_TOOLS_DIR)

#rpm:	bzip
#	rpmbuild --define "_rpmdir `pwd`" \
#		 --define '_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm' \
#		 -tb $(PACK_PREP_FULL_DIR).tar.bz2
#	mv *.rpm $(PACKAGEDIR)

#srpm:	bzip
#	rpmbuild --define "_srcrpmdir `pwd`" \
#		 --define '_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm' \
#		 -ts $(PACK_PREP_FULL_DIR).tar.bz2
#	mv *.rpm $(PACKAGEDIR)

#rpms:	bzip
#	rpmbuild --define "_rpmdir `pwd`" \
#		 --define "_srcrpmdir `pwd`" \
#		 --define '_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm' \
#		 -ta $(PACK_PREP_FULL_DIR).tar.bz2
#	mv *.rpm $(PACKAGEDIR)

#nsis: distprep
#	$(NSISDIR)/bin/buildtranslations.plx $(NSISDIR)/$(NSIS_SCRIPT) \
#		$(NSISDIR)/
#	$(MAKENSIS) $(NSISDIR)/$(NSIS_SCRIPT)

#dist: all zip tarball bzip rpms \
#	zip-svgonly tarball-svgonly bzip-svgonly \
#	zip-tools tarball-tools bzip-tools

test:
	@echo "RELEASE_NUM: $(RELEASE_NUM)"
	@echo "APPNAME: $(APPNAME)"
	@echo "SRCDIR: $(SRCDIR)"
	@echo "TOOLSDIR: $(TOOLSDIR)"
	@echo "PACKAGEDIR: $(PACKAGEDIR)"
	@echo "PACK_FULL_DIR: $(PACK_FULL_DIR)"
	@echo "PACK_SVG_DIR: $(PACK_SVG_DIR)"
	@echo "PACK_TOOLS_DIR: $(PACK_TOOLS_DIR)"
	@echo "PACK_PREP_FULL_DIR: $(PACK_PREP_FULL_DIR)"
	@echo "PACK_PREP_SVG_DIR: $(PACK_PREP_SVG_DIR)"
	@echo "PACK_PREP_TOOLS_DIR: $(PACK_PREP_TOOLS_DIR)"
	
	@echo "DATADIR: $(DATADIR)"
	@echo "CLIPARTDIR: $(CLIPARTDIR)"
	@echo "APPDIR: $(APPDIR)"
	@echo "MANDIR: $(MANDIR)"
	@echo "MAN1DIR: $(MAN1DIR)"
	@echo "INSTALL: $(INSTALL)"

#clean:
#	rm -f AUTHORS
#	rm -f $(NSISDIR)/$(NSIS_SCRIPT)
#	rm -Rf $(NSISDIR)/translations $(NSISDIR)/includes
#	rm -f $(APPNAME).spec
#	rm -f $(APPNAME).1

#distclean: clean
#	rm -rf $(PACKAGEDIR)

# ready for adding artists' names generated from the clipart/ processes
# just cat any other AUTHORS files to get this sorted list
#AUTHORS: $(AUTHORS_FILES)
#	cat $(AUTHORS_FILES) | sort -u > AUTHORS

# embed version number where needed
#versions: $(NSISDIR)/$(NSIS_SCRIPT) $(APPNAME).spec

# embed version number in the NSIS build script input file
# also replace some constants that are hard to define in nsis 
#$(NSISDIR)/$(NSIS_SCRIPT): $(NSISDIR)/$(NSIS_SCRIPT).in VERSION
#	sed -e "s/APP_VERSION/$(RELEASE_NUM)/" \
#		$(NSISDIR)/$(NSIS_SCRIPT).in > $(NSISDIR)/$(NSIS_SCRIPT).tmp
#	
#	sed -e "s/FULL_NAME/$(FULLNAME)/" \
#		$(NSISDIR)/$(NSIS_SCRIPT).tmp > $(NSISDIR)/$(NSIS_SCRIPT).tmp2
#	
#	sed -e "s/SHORT_NAME/$(APPNAME)/" \
#		$(NSISDIR)/$(NSIS_SCRIPT).tmp2 > $(NSISDIR)/$(NSIS_SCRIPT).tmp3
#
#	sed -e "s/NSISDIR/$(NSISDIR)/" \
#		$(NSISDIR)/$(NSIS_SCRIPT).tmp3 > $(NSISDIR)/$(NSIS_SCRIPT)
#
#	# clean up tmp files
#	rm -Rf $(NSISDIR)/$(NSIS_SCRIPT).tmp*

# embed version number in the spec file
#$(APPNAME).spec: $(APPNAME).spec.in VERSION
#	sed -e "s/APP_VERSION/$(RELEASE_NUM)/" \
#		$(APPNAME).spec.in > $(APPNAME).spec


